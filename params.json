{"name":"Osxcollector","tagline":"A forensic evidence collection & analysis toolkit for OSX","body":"# OSXCollector Manual\r\nOSXCollector is a forensic evidence collection & analysis toolkit for OSX.\r\n\r\n#### Forensic Collection\r\nThe collection script runs on a potentially infected machine and outputs a JSON file that describes the target machine. OSXCollector gathers information from plists, sqlite databases and the local filesystem.\r\n\r\n#### Forensic Analysis\r\nArmed with the forensic collection, an analyst can answer the question like:\r\n* _Is this machine infected?_\r\n* _How'd that malware get there?_\r\n* _How can I prevent and detect further infection?_\r\n\r\nYelp automates the analysis of most OSXCollector runs converting OSXCollector output into an easily readable and actionable summary of _just the suspicious stuff_.\r\n\r\n## Performing Collection\r\n`osxcollector.py` is a single Python file that runs without any dependencies on a standard OSX machine. This makes it really easy to run collection on any machine - no fussing with brew, pip, config files, or environment variables. Just copy the single file onto the machine and run it.\r\n\r\n`sudo osxcollector.py` is all it takes.\r\n\r\n```shell\r\n$ sudo osxcollector.py\r\nWrote 35394 lines.\r\nOutput in osxcollect-2014_12_21-08_49_39.tar.gz\r\n```\r\n\r\nThe JSON output of the collector, along with some helpful files like system logs, has been bundled into a .tar.gz for handoff to an analyst.\r\n\r\n`osxcollector.py` also has a lot of useful options to change how collection works:\r\n* `-i INCIDENT_PREFIX`/`--id=INCIDENT_PREFIX`:\r\n  Sets an identifier which is used as the prefix of the output file. The default value is `osxcollect`.\r\n  ```shell\r\n  $ sudo osxcollector.py -i IncontinentSealord\r\n  Wrote 35394 lines.\r\n  Output in IncontinentSealord-2014_12_21-08_49_39.tar.gz\r\n  ```\r\n  Get creative with incident names, it makes it easier to laugh through the pain.\r\n\r\n* `-p ROOTPATH`/`--path=ROOTPATH`:\r\n  Sets the path to the root of the filesystem to run collection on. The default value is `/`. This is great for running collection on the image of a disk.\r\n  ```shell\r\n  $ sudo osxcollector.py -p '/mnt/powned'\r\n  ```\r\n\r\n* `-s SECTION`/`--section=SECTION`:\r\n  Runs only a portion of the full collection. Can be specified more than once. The full list of sections is:\r\n  * `version`\r\n  * `system_info`\r\n  * `kext`\r\n  * `startup`\r\n  * `applications`\r\n  * `quarantines`\r\n  * `downloads`\r\n  * `chrome`\r\n  * `firefox`\r\n  * `safari`\r\n  * `accounts`\r\n  * `mail`\r\n\r\n  ```shell\r\n  $ sudo osxcollector.py -s 'startup' -s 'downloads'\r\n  ```\r\n\r\n* `-d`/`--debug`:\r\n  Enables verbose output and python breakpoints. If something is wrong with OSXCollector, try this.\r\n\r\n  ```shell\r\n  $ sudo osxcollector.py -d\r\n  ```\r\n\r\n## Details of Collection\r\nThe collector outputs a `.tar.gz` containing all the collected artifacts. The archive contains a JSON file with the majority of information.  Additionally, a set of useful logs from the target system logs are included.\r\n\r\n#### Common Keys\r\n\r\n##### Every Record\r\nEach line of the JSON file records 1 _piece of information_.  There are some common keys that appear in every JSON record:\r\n* `osxcollector_incident_id`: A unique ID shared by every record.\r\n* `osxcollector_section`: The _section_ or type of data this record holds.\r\n* `osxcollector_subsection`: The _subsection_ or more detailed descriptor of the type of data this record holds.\r\n\r\n##### File Records\r\nFor records representing files there are a bunch of useful keys:\r\n* `ctime`: The file creation time.\r\n* `mtime`: The file modified time.\r\n* `file_path`: The absolute path to the file.\r\n* `md5`: MD5 hash of the file contents.\r\n* `sha1`: SHA1 hash of the file contents.\r\n* `sha2`: SHA2 hash of the file contents.\r\n\r\nFor records representing downloaded files:\r\n* `xattr-wherefrom`: A list containing the source and referrer URLs for the downloaded file.\r\n* `xattr-quarantines`: A string describing which application downloaded the file.\r\n\r\n##### Sqllite Records\r\nFor records representing a row of a sqllite database:\r\n* `osxcollector_table_name`: The table name the row comes from.\r\n* `osxcollector_db_path`: The absolute path to the sqllite file.\r\n\r\nFor records that represent data associated with a specific user:\r\n* `osxcollector_username`: The name of the user\r\n\r\n#### Timestamps\r\nOSXCollector attempts to convert timestamps to human readable date/time strings in the format `YYYY-mm-dd hh:MM:ss`. It uses heuristics to automatically identify various timestamps:\r\n* seconds since epoch\r\n* milliseconds since epoch\r\n* seconds since 2001-01-01\r\n* seconds since 1601-01-01\r\n\r\n#### Sections\r\n##### `version` section\r\n\r\nThe current version of OSXCollector.\r\n\r\n##### `system_info` section\r\n\r\nCollects basic information about the system:\r\n\r\n - system name\r\n - node name\r\n - release\r\n - version\r\n - machine\r\n\r\n##### `kext` section\r\n\r\nCollects the Kernel extensions from:\r\n- `/System/Library/Extensions`\r\n- `/Library/Extensions`\r\n\r\n##### `startup` section\r\n\r\nCollects information about the\r\n[LaunchAgents](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html),\r\nLaunchDaemons, ScriptingAdditions,\r\n[StartupItems](https://developer.apple.com/library/mac/documentation/macosx/conceptual/bpsystemstartup/chapters/StartupItems.html)\r\nand other login items from:\r\n\r\n - `/System/Library/LaunchAgents`\r\n - `/System/Library/LaunchDaemons`\r\n - `/Library/LaunchAgents`\r\n - `~/Library/LaunchAgents`\r\n - `/Library/LaunchDaemons`\r\n - `/System/Library/ScriptingAdditions`\r\n - `/Library/ScriptingAdditions`\r\n - `/System/Library/StartupItems`\r\n - `/Library/StartupItems`\r\n - `~/Library/Preferences/com.apple.loginitems.plist`\r\n\r\nMore information about the Max OS X startup can be found here:\r\nhttp://www.malicious-streams.com/article/Mac_OSX_Startup.pdf\r\n\r\n##### `applications` section\r\n\r\nHashes installed applications and gathers install history from:\r\n\r\n - `/Applications`\r\n - `~/Applications`\r\n - `/Library/Receipts/InstallHistory.plist`\r\n\r\n##### `quarantines` section\r\n\r\nQuarantines are basically the info necessary to show the 'Are you sure you wanna\r\nrun this?' when a user is trying to open a file downloaded from the internet.\r\nFor some more details, checkout the Apple Support explanation of Quarantines:\r\nhttp://support.apple.com/kb/HT3662\r\n\r\nThis section collects also information from XProtect hash-based malware check\r\nfor quarantines files. The plist is at:\r\n`/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.plist`\r\n\r\nXProtect also add minimum versions for Internet Plugins. That plist is at:\r\n`/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.meta.plist`\r\n\r\n##### `downloads` section\r\n\r\nHashes all users' downloaded files from:\r\n\r\n - `~/Downloads`\r\n - `~/Library/Mail Downloads`\r\n - `~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads`\r\n\r\n##### `chrome` section\r\n\r\nCollects following information from Google Chrome web browser:\r\n\r\n - History\r\n - Archived History\r\n - Cookies\r\n - Login Data\r\n - Top Sites\r\n - Web Data\r\n\r\nThis data is extracted from `~/Library/Application Support/Google/Chrome/Default`\r\n\r\n##### `firefox` section\r\n\r\nCollects information from the different SQLite databases in a Firefox profile:\r\n\r\n - Cookies\r\n - Downloads\r\n - Form History\r\n - History\r\n - Signons\r\n - Permissions\r\n - Addons\r\n - Extension\r\n - Content Preferences\r\n - Health Report\r\n - Webapps Store\r\n\r\nThis information is extracted from `~/Library/Application Support/Firefox/Profiles`\r\n\r\nFor more details about Firefox profile folder see\r\nhttp://kb.mozillazine.org/Profile_folder_-_Firefox\r\n\r\n##### `safari` section\r\n\r\nCollects information from the different plist and SQLite databases in a Safari\r\nprofile:\r\n\r\n - Downloads\r\n - History\r\n - Databases\r\n - Local Storage\r\n\r\n##### `accounts` section\r\nCollects information about users' accounts:\r\n\r\n - system admins: `/private/var/db/dslocal/nodes/Default/groups/admin.plist`\r\n - system users: `/private/var/db/dslocal/nodes/Default/users`\r\n - social accounts: `~/Library/Accounts/Accounts3.sqlite`\r\n - users' recent items: `~/Library/Preferences/com.apple.recentitems.plist`\r\n\r\n##### `mail` section\r\nHashes files in the mail app directories:\r\n\r\n - `~/Library/Mail`\r\n - `~/Library/Mail Downloads`\r\n\r\n## Basic Manual Analysis\r\nForensic analysis is a bit of art and a bit of science. Every analyst will see a bit of a different story when reading the output from OSXCollector. That's part of what makes analysis fun.\r\n\r\nGenerally, collection is performed on a target machine because something is hinky: anti-virus found a file it doesn't like, deep packet inspect observed a callout, endpoint monitoring noticed a new startup item. The details of this initial alert - a file path, a timestamp, a hash, a domain, an IP, etc. - that's enough to get going.\r\n\r\n#### Timestamps\r\n\r\nSimply grepping a few minutes before and after a timestamp works great:\r\n\r\n```shell\r\n$ cat INCIDENT32.json | grep '2014-01-01 11:3[2-8]'\r\n```\r\n\r\n#### Browser History\r\n\r\nIt's in there. A tool like [jq](http://stedolan.github.io/jq/) can be very helpful to do some fancy output:\r\n\r\n```shell\r\n$ cat INCIDENT32.json | grep '2014-01-01 11:3[2-8]' | jq 'select(has(\"url\"))|.url'\r\n```\r\n\r\n#### A Single User\r\n\r\n```shell\r\n$ cat INCIDENT32.json | jq 'select(.osxcollector_username==\"ivanlei\")|.'\r\n```\r\n\r\n## Automated Analysis\r\nThe `osxcollector.output_filters` package contains filters that process and transform the output of OSXCollector. The goal of filters is to make it easier to understand output.\r\n\r\nEach filter has a single purpose. They do one thing and they do it right.\r\n\r\n#### Running Filters\r\nUnlike `osxcollector.py` filters have dependencies that aren't already installed on a new Mac. The best solution for ensure dependencies can be found is to use virtualenv.\r\n\r\nTo setup a virtualenv for the first time use:\r\n```\r\n$ sudo pip install virtualenv\r\n$ virtualenv --system-site-packages venv_osxcollector\r\n$ source ./venv_osxcollector/bin/activate\r\n$ sudo pip install -r ./requirements-dev.txt\r\n```\r\n\r\n#### Filter Configuration\r\nMany filters require configuration, like API keys or details on a blacklist. The configuration for filters is done in a YAML file. The file is named `osxcollector.yaml`. The filter will look for the config file in:\r\n- The current directory.\r\n- The user's home directory\r\n- The path pointed to by the environment variable OSXCOLLECTOR_CONF\r\n\r\n#### DomainsFilter\r\n`osxcollector.output_filters.domains` attempts to find domain names in a line. Any domains that are found are added to the line with the key `osxcollector_domains`. Run it as:\r\n```\r\n$ cat INCIDENT32.json | python -m osxcollector.output_filters.domains | jq 'select(has(\"osxcollector_domains\"))'\r\n```\r\n\r\n#### ChromeHistoryFilter\r\n`osxcollector.output_filters.chome_history` builds a really nice Chrome browser history sorted in descending time order. Run it as:\r\n```\r\n$ cat INCIDENT32.json | python -m osxcollector.output_filters.chrome_history | jq 'select(.osxcollector_section==\"chrome\" and .osxcollector_subsection==\"history\" and .osxcollector_table_name ==\"visits\")'\r\n```\r\n\r\n#### FirefoxHistoryFilter\r\n`osxcollector.output_filters.firefox_history` builds a really nice Firefox browser history sorted in descending time order. Run it as:\r\n```\r\n$ cat INCIDENT32.json | python -m osxcollector.output_filters.firefox_history | jq 'select(.osxcollector_section==\"firefox\" and .osxcollector_subsection==\"history\" and .osxcollector_table_name ==\"moz_places\")'\r\n```\r\n\r\n#### OpenDNSFilter\r\n`osxcollector.output_filters.opendns` lookups domains with OpenDNS. Domains associated with suspicious categories are futher enhanced with additional OpenDNS data. Run it as:\r\n```\r\n$ cat INCIDENT32.json | python -m osxcollector.output_filters.domains | python -m osxcollector.output_filters.opendns | jq 'select(has(\"osxcollector_opendns\"))'\r\n```\r\n\r\n#### VTHashesFilter\r\n`osxcollector.output_filters.virustotal_hashes` lookups md5 hashes with VirusTotal. Run it as:\r\n```\r\n$ cat INCIDENT32.json | python -m osxcollector.output_filters.virustotal_hashes | jq 'select(has(\"osxcollector_vt_hashes\"))'\r\n```\r\n\r\n#### BlacklistFilter\r\n`osxcollector.output_filters.blacklist` reads a set of blacklists from the `osxcollector.yaml` and marks any lines with values on the blacklist. The BlacklistFilter allows for multiple blacklists to be compared against at once. Each blacklists requires:\r\n - blacklist_name, A name\r\n - blacklist_keys, JSON paths. These can be of the form \"a.b\" to look at \"b\" in {\"a\": {\"b\": \"foo\"}}\r\n - value_file, the path to a file containing values considered blacklisted. Any line starting with # is skipped\r\n - blacklist_is_regex, should values in the file be treated as Python regex\r\n\r\nRun it as:\r\n```shell\r\n$ cat INCIDENT32.json | python -m osxcollector.output_filters.blacklist | jq 'select(has(\"osxcollector_blacklist\"))'\r\n```\r\n\r\n## Contributing to OSXCollector\r\nWe encourage you to extend the functionality of OSXCollector to suit your needs.\r\n\r\n#### Testing OSXCollector\r\nA collection of tests for osxcollector is provided under the `tests` directory. In order to run these tests you must install [tox](https://pypi.python.org/pypi/tox):\r\n```shell\r\n$ sudo pip install tox\r\n```\r\n\r\nTo run this suit of tests, `cd` into `osxcollector` and enter:\r\n```shell\r\n$ make test\r\n```\r\n\r\nPlease note that tox will fail to run if osxcollector is stored under a path containing white spaces.\r\n  Bad Path  -> \"/path/to/my files/osxcollector\"\r\n  Good Path -> \"/path/to/my_files/osxcollector\"\r\n\r\n#### Development Tips\r\nThe functionality of OSXCollector is stored in a single file: `osxcollector.py`.\r\n\r\nEnsure that all of the osxcollector tests pass before editing the source code. You can run the tests using: `make test`\r\n\r\nAfter making changes to the source code, run `make test` again to verify that your changes did not break any of the tests.\r\n\r\n## License\r\nThis work is licensed under the GNU General Public License and a derivation of [https://github.com/jipegit/OSXAuditor](https://github.com/jipegit/OSXAuditor)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}