#!/usr/bin/env python
# -*- coding: utf-8 -*-
import investigate

from osxcollector.output_filters.threat_feed import ThreatFeedFilter
from osxcollector.output_filters.output_filter import run_filter


class OpenDNSFilter(ThreatFeedFilter):

    """A class to find suspicious domains using OpenDNS Investigate API."""

    def __init__(self, only_lookup_when=None, is_suspicious_when=None):
        super(OpenDNSFilter, self).__init__('osxcollector_domains', 'osxcollector_opendns',
                                            only_lookup_when=only_lookup_when, is_suspicious_when=is_suspicious_when)

    # Domain categories to consider suspicious
    SUSPICIOUS_CATEGORIES = [
        'Adware',
        'Botnet',
        'Typo Squatting',
        'Drive-by Downloads/Exploits',
        'Mobile Threats',
        'High Risk Sites and Locations',
        'Malware',
        'Phishing'
    ]

    SECURITY_RANK_BENIGN = 0
    SECURITY_RANK_SUSPICIOUS = -100
    SECURITY_RANK_THRESHHOLD = -50

    SECURITY_RANK_KEYS = [
        # Domain Generation Algorithm. This score is generated based on the likeliness of the domain name being
        # generated by an algorithm rather than a human. This algorithm is designed to identify domains which have
        # been created using an automated randomization strategy, which is a common evasion technique in malware kits
        # or botnets. This score ranges from -100 (suspicious) to 0 (benign)
        # <http://labs.opendns.com/2013/10/24/mysterious-dga-lets-investigate-sgraph/>
        'dga_score',

        # Suspicious rank for a domain that reviews based on the lookup behavior of client IP for the domain.
        # Securerank is designed to identify hostnames requested by known infected clients but never requested
        # by clean clients, assuming these domains are more likely to be bad.
        # Scores returned range from -100 (suspicious) to 0 (benign).
        # <http://labs.opendns.com/2013/03/28/secure-rank-a-large-scale-discovery-algorithm-for-predictive-detection/>
        'securerank2',

        # ASN reputation score, ranges from -100 to 0 with -100 being very suspicious
        'asn_score',

        # Prefix ranks domains given their IP prefixes (An IP prefix is the first three octets in an IP address)
        # and the reputation score of these prefixes.
        # Ranges from -100 to 0, -100 being very suspicious
        'prefix_score',

        # RIP ranks domains given their IP addresses and the reputation score of these IP addresses.
        # Ranges from -100 to 0, -100 being very suspicious
        'rip_score'
    ]

    SECURITY_BAD_KEYS = [
        # The name of any known attacks associated with this domain.
        # Returns blank is no known threat associated with domain.
        'attack',

        # The type of the known attack, such as botnet or APT.
        # Returns blank if no known threat associated with domain.
        'threat_type'
    ]

    def _lookup_iocs(self):
        """Caches the OpenDNS info for a set of domains"""
        opendns = investigate.Investigate(self._api_key)
        categorized = opendns.categorization(list(self._all_iocs), labels=True)

        for domain in categorized.keys():
            if self._is_suspicious(domain, categorized[domain]):
                security = opendns.security(domain)
                if self._should_add_to_blob(domain, categorized[domain], security):
                    trimmed_security = {}
                    for key in self.SECURITY_RANK_KEYS:
                        if key in security:
                            trimmed_security[key] = security[key]
                    for key in self.SECURITY_BAD_KEYS:
                        if key in security:
                            trimmed_security[key] = security[key]
                    self._threat_info_by_iocs[domain] = {
                        'domain': domain,
                        'categorization': categorized[domain],
                        'security': trimmed_security,
                        'link': 'https://investigate.opendns.com/domain-view/name/{0}/view'.format(domain)
                    }

    def _is_suspicious(self, domain, category_info):
        """Analyzes info from opendns and makes a boolean determination of suspicious or not.

        Args:
            category_info: The result of a call to opendns.categorization
        Returns:
            boolean
        """
        if -1 == category_info['status']:
            return True
        elif any([cat in self.SUSPICIOUS_CATEGORIES for cat in category_info['content_categories']]):
            return True
        elif any([cat in self.SUSPICIOUS_CATEGORIES for cat in category_info['security_categories']]):
            return True
        elif domain in self._suspicious_iocs:
            return True

        return False

    def _should_add_to_blob(self, domain, category_info, security_info):
        """Analyzes info from opendns and makes a boolean determination of suspicious or not.

        Args:
            category_info: The result of a call to opendns.categorization
            security_info: The result of a call to opendns.security
        Returns:
            boolean
        """
        # Categorization of site
        if -1 == category_info['status']:
            return True

        # security_rank scores
        elif any([security_info.get(key, self.SECURITY_RANK_BENIGN) <= self.SECURITY_RANK_THRESHHOLD for key in self.SECURITY_RANK_KEYS]):
            return True

        elif(any([security_info.get(key, None) for key in self.SECURITY_BAD_KEYS])):
            return True

        elif domain in self._suspicious_iocs:
            return True

        return False


def main():
    run_filter(OpenDNSFilter())


if __name__ == "__main__":
    main()
